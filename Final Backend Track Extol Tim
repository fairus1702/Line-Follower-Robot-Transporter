#include <ESP8266WiFi.h>
#include <Ticker.h>

// Ganti dengan WiFi kamu
const char* ssid = "fairus";
const char* password = "12345678";

WiFiServer server(80);

// Motor dan Servo pin
#define PWMA D1
#define PWMB D2
#define DA D3
#define DB D4

#define S1 D6
#define S2 D7  
#define S3 A0
#define S4 D8
#define S5 10  // Pin 10 (GPIO10)

// Servo dengan PWM manual
#define SERVO1_PIN D0   // Changed from D0 to D5 since S5 now uses D0
#define SERVO2_PIN D5   // Changed to D9
Ticker servo1Ticker;
Ticker servo2Ticker;
volatile int angle1 = 0;
volatile int angle2 = 0;

// Mode operasi
bool lineFollowMode = false;

// Function prototypes
void sendServo1PWM();
void sendServo2PWM();
void followLine(int s1_val, int s2_val, int s3_val, int s4_val, int s5_val);
void handleCommand(String cmd);
String getSensorData();
void maju();
void majupelan();
void mundur();
void belokkiri();
void belokkirikeras();
void belokkiri90();
void belokkanan();
void belokkanankeras();
void belokkanan90();
void berhenti();

void setup() {
  Serial.begin(115200);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");

  int retry = 0;
  while (WiFi.status() != WL_CONNECTED && retry < 20) {
    delay(1000);
    Serial.print(".");
    retry++;
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFailed to connect to WiFi.");
    return;
  }

  Serial.println("\nConnected!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  server.begin();

  pinMode(PWMA, OUTPUT);
  pinMode(PWMB, OUTPUT);
  pinMode(DA, OUTPUT);
  pinMode(DB, OUTPUT);

  pinMode(S1, INPUT);
  pinMode(S2, INPUT);
  pinMode(S4, INPUT);
  pinMode(S5, INPUT);

  // Setup servo pins
  pinMode(SERVO1_PIN, OUTPUT);
  pinMode(SERVO2_PIN, OUTPUT);
  
  // Initialize servo positions
  angle1 = 0;
  angle2 = 0;
  
  // Start servo PWM timers (50Hz = 20ms period)
  servo1Ticker.attach_ms(20, sendServo1PWM);
  servo2Ticker.attach_ms(20, sendServo2PWM);

  berhenti();
}

void loop() {
  WiFiClient client = server.available();

  if (client) {
    Serial.println("Client connected");
    String inputString = "";
    unsigned long lastSensorTime = millis();

    while (client.connected()) {
      // Line following logic jika mode aktif
      if (lineFollowMode) {
        int s1 = digitalRead(S1);
        int s2 = digitalRead(S2);
        int s3 = analogRead(S3) > 500 ? 1 : 0;
        int s4 = digitalRead(S4);
        int s5 = digitalRead(S5);
        
        followLine(s1, s2, s3, s4, s5);
      }
      
      // Baca perintah dari client
      while (client.available()) {
        char c = client.read();
        if (c == '\n') {
          inputString.trim();
          Serial.println("Received: " + inputString);

          handleCommand(inputString);
          inputString = "";
        } else {
          inputString += c;
        }
      }
      
      // Kirim data sensor tiap 100ms
      if (millis() - lastSensorTime >= 100) {
        String sensorData = getSensorData();
        client.println(sensorData);
        lastSensorTime = millis();
      }
    }
    client.stop();
    Serial.println("Client disconnected");
  }
}

void sendServo1PWM() {
  int pulseWidth = map(angle1, 0, 180, 544, 2400);
  digitalWrite(SERVO1_PIN, HIGH);
  delayMicroseconds(pulseWidth);
  digitalWrite(SERVO1_PIN, LOW);
}

void sendServo2PWM() {
  int pulseWidth = map(angle2, 0, 180, 544, 2400);
  digitalWrite(SERVO2_PIN, HIGH);
  delayMicroseconds(pulseWidth);
  digitalWrite(SERVO2_PIN, LOW);
}

void followLine(int s1_val, int s2_val, int s3_val, int s4_val, int s5_val) {
  // Sistem prioritas untuk pembacaan sensor yang lebih akurat
  
  if (s3_val || (s2_val && s3_val && s4_val)){
    maju();
    return;
  } 
  
  if ((s3_val && s4_val && s5_val)|| (s4_val && s5_val) || (s2_val && s3_val && s4_val && s5_val)) {
    if (s5_val) {
      belokkanankeras();
    } else {
      belokkanan();
    } 
    return;
  } 
  
  if ((s1_val && s2_val && s3_val) || (s1_val && s2_val)  || (s1_val && s2_val && s3_val && s4_val) ) {
    if (s1_val) {
      belokkirikeras();
    } else {
      belokkiri();
    } 
    return;
  } 
  
  mundur();
}

void handleCommand(String cmd) {
  if (cmd == "w") maju();
  else if (cmd == "wp") majupelan();
  else if (cmd == "s") mundur();
  else if (cmd == "a") belokkiri();
  else if (cmd == "ak") belokkirikeras();
  else if (cmd == "a90") belokkiri90();
  else if (cmd == "d") belokkanan();
  else if (cmd == "dk") belokkanankeras();
  else if (cmd == "d90") belokkanan90();
  else if (cmd == "x") berhenti();

  // Servo commands
  else if (cmd == "s1_max") angle1 = 180;
  else if (cmd == "s1_mid") angle1 = 35;
  else if (cmd == "s1_up")  angle1 = 11;
  else if (cmd == "s2_grip") angle2 = 3;
  else if (cmd == "s2_open") angle2 = 85;
  
  // Line following mode toggle
  else if (cmd == "follow_on") {
    lineFollowMode = true;
    Serial.println("Line follow mode ON");
  }
  else if (cmd == "follow_off") {
    lineFollowMode = false;
    berhenti();
    Serial.println("Line follow mode OFF");
  }
}

String getSensorData() {
  int s1 = digitalRead(S1);
  int s2 = digitalRead(S2);
  int s3 = analogRead(S3) > 500 ? 1 : 0;
  int s4 = digitalRead(S4);
  int s5 = digitalRead(S5);

  String data = String(s1) + "," + String(s2) + "," + String(s3) + "," + String(s4) + "," + String(s5);
  Serial.println("Sensor: " + data);
  return data;
}

// --- Fungsi Gerakan Preset (PWM disesuaikan) ---
void maju() {
  digitalWrite(DA, 1);
  digitalWrite(DB, 1);
  analogWrite(PWMA, 140);  // Kiri
  analogWrite(PWMB, 140);  // Kanan
}

void majupelan() {
  digitalWrite(DA, 1);
  digitalWrite(DB, 1);
  analogWrite(PWMA, 40);
  analogWrite(PWMB, 40);
}

void mundur() {
  digitalWrite(DA, 0);
  digitalWrite(DB, 0);
  analogWrite(PWMA, 80);
  analogWrite(PWMB, 80);
}

void belokkiri() {
  digitalWrite(DA, 1);
  digitalWrite(DB, 1);
  analogWrite(PWMA, 70);
  analogWrite(PWMB, 40);
}

void belokkirikeras() {
  digitalWrite(DA, 0);
  digitalWrite(DB, 1);
  analogWrite(PWMA, 70);
  analogWrite(PWMB, 70);
}

void belokkiri90() {
  digitalWrite(DA, 0);
  digitalWrite(DB, 1);
  analogWrite(PWMA, 90);
  analogWrite(PWMB, 90);
  delay(300); // Waktu putar kiri 90 derajat
  berhenti();
}

void belokkanan() {
  digitalWrite(DA, 1);
  digitalWrite(DB, 1);
  analogWrite(PWMA, 40);
  analogWrite(PWMB, 70);
}

void belokkanankeras() {
  digitalWrite(DA, 1);
  digitalWrite(DB, 0);
  analogWrite(PWMA, 70);
  analogWrite(PWMB, 70);
}

void belokkanan90() {
  digitalWrite(DA, 1);
  digitalWrite(DB, 0);
  analogWrite(PWMA, 90);
  analogWrite(PWMB, 90);
  delay(300); // Waktu putar kanan 90 derajat
  berhenti();
}

void berhenti() {
  analogWrite(PWMA, 0);
  analogWrite(PWMB, 0);
}
