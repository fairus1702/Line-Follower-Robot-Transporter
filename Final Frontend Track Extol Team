import math
import tkinter as tk
from tkinter import messagebox
import socket
import threading
import time

class RobotGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Kontrol Robot Line Follower")
        self.root.geometry("1000x620")
        self.root.configure(bg="#F0F4F8")

        self.connected = False
        self.tcp_conn = None

        # Tracker canvas
        self.canvas_width = 400
        self.canvas_height = 400
        self.tracker_canvas = tk.Canvas(self.root, width=self.canvas_width, height=self.canvas_height, bg="white", relief="sunken", bd=2)
        self.tracker_canvas.place(x=500, y=270)

        # Tracker state
        self.tracker_x = self.canvas_width // 2
        self.tracker_y = self.canvas_height // 2
        self.tracker_size = 20
        self.heading_angle = 270  # Facing up in degrees
        self.tracker = self.tracker_canvas.create_polygon(self.calculate_arrow(), fill="blue")

        # Compass
        self.tracker_canvas.create_text(200, 10, text="N", font=("Arial", 10, "bold"))
        self.tracker_canvas.create_text(200, 390, text="S", font=("Arial", 10, "bold"))
        self.tracker_canvas.create_text(10, 200, text="W", font=("Arial", 10, "bold"))
        self.tracker_canvas.create_text(390, 200, text="E", font=("Arial", 10, "bold"))
        
        #Auto Mode and Manual Mode
        self.frame_sensor = tk.LabelFrame(self.root, text="Monitoring Sensor Garis", padx=10, pady=10, bg="#E8F0FE")
        self.frame_sensor.place(x=500, y=80)

        # Tombol Auto/Manual Mode
        tk.Button(self.root, text="Auto Mode", width=14, bg="#28a745", fg="white",
                  command=lambda: self.send_command("follow_on")).place(x=700, y=100)

        tk.Button(self.root, text="Manual Mode", width=14, bg="#dc3545", fg="white",
                  command=lambda: self.send_command("follow_off")).place(x=700, y=150)
        
        

        # Control panels
        self.build_ui()

        # Sensor state
        self.sensor_vars = [tk.StringVar(value=f"S{i+1}: -") for i in range(5)]
        for i, var in enumerate(self.sensor_vars):
            tk.Label(self.frame_sensor, textvariable=var, width=18, relief="groove", bg="white", font=("Courier", 10)).grid(row=i, column=0, padx=5, pady=3)

        # Status labels
        self.status_gerak = tk.StringVar(value="Status Gerak: -")
        self.status_grip = tk.StringVar(value="Status Gripper: -")
        tk.Label(self.root, textvariable=self.status_gerak, bg="#F0F4F8", font=("Segoe UI", 10)).place(x=30, y=10)
        tk.Label(self.root, textvariable=self.status_grip, bg="#F0F4F8", font=("Segoe UI", 10)).place(x=30, y=30)

        threading.Thread(target=self.update_sensor, daemon=True).start()

        # Tracker movement state
        self.speed_left_pwm = 0
        self.speed_right_pwm = 0
        self.stop_timer = 0
        self.update_tracker_loop()


        # Keyboard bindings
        self.root.bind("<Up>", lambda e: self.send_command("w"))
        self.root.bind("<Down>", lambda e: self.send_command("s"))
        self.root.bind("<Left>", lambda e: self.send_command("a"))
        self.root.bind("<Right>", lambda e: self.send_command("d"))
        self.root.bind("a", lambda e: self.send_command("ak"))  # Belok kiri keras
        self.root.bind("d", lambda e: self.send_command("dk"))  # Belok kanan keras
        self.root.bind("z", lambda e: self.send_command("a90")) # Putar kiri 90
        self.root.bind("c", lambda e: self.send_command("d90")) # Putar kanan 90
        self.root.bind("x", lambda e: self.send_command("x"))   # Berhenti

        self.root.bind("1", lambda e: self.send_command("s1_max"))
        self.root.bind("2", lambda e: self.send_command("s1_mid"))
        self.root.bind("3", lambda e: self.send_command("s1_up"))
        self.root.bind("4", lambda e: self.send_command("s2_grip"))
        self.root.bind("5", lambda e: self.send_command("s2_open"))

    def build_ui(self):
        ip_frame = tk.Frame(self.root, bg="#F0F4F8")
        ip_frame.pack(pady=(10, 5))
        tk.Label(ip_frame, text="IP ESP8266:", font=("Segoe UI", 11), bg="#F0F4F8").grid(row=0, column=0, padx=(0, 5))
        self.ip_entry = tk.Entry(ip_frame, font=("Segoe UI", 11), width=18)
        self.ip_entry.grid(row=0, column=1, padx=(0, 5))
        tk.Button(ip_frame, text="Connect", font=("Segoe UI", 10, "bold"), bg="#0a75ff", fg="white", command=self.connect_wifi).grid(row=0, column=2)

        frame_motor = tk.LabelFrame(self.root, text="Kontrol Motor", padx=10, pady=10, bg="#E8F0FE")
        frame_motor.place(x=20, y=80)
        motor_buttons = [
            ("Maju", "w"), ("Maju Pelan", "wp"),
            ("Belok Kiri", "a"), ("Belok Kiri Keras", "ak"), ("Belok Kiri 90", "a90"),
            ("Belok Kanan", "d"), ("Belok Kanan Keras", "dk"), ("Belok Kanan 90", "d90"),
            ("Mundur", "s"), ("Berhenti", "x")
        ]
        for i, (text, cmd) in enumerate(motor_buttons):
            tk.Button(frame_motor, text=text, width=18, command=lambda c=cmd: self.send_command(c)).grid(row=i // 2, column=i % 2, padx=5, pady=5)

        tk.Button(frame_motor, text="Reset Tracker", width=38, bg="orange", command=self.reset_tracker).grid(row=6, column=0, columnspan=2, pady=(10, 0))

        frame_servo1 = tk.LabelFrame(self.root, text="Servo 1", padx=10, pady=10, bg="#E8F0FE")
        frame_servo1.place(x=20, y=350)
        servo1_buttons = [("Naik", "s1_max"), ("Turun Setengah", "s1_mid"), ("Turun maks", "s1_up")]
        for i, (text, cmd) in enumerate(servo1_buttons):
            tk.Button(frame_servo1, text=text, width=18, command=lambda c=cmd: self.send_command(c)).grid(row=i, column=0, padx=5, pady=2)

        frame_servo2 = tk.LabelFrame(self.root, text="Servo 2", padx=10, pady=10, bg="#E8F0FE")
        frame_servo2.place(x=250, y=350)
        servo2_buttons = [("Jepit", "s2_grip"), ("Buka", "s2_open")]
        for i, (text, cmd) in enumerate(servo2_buttons):
            tk.Button(frame_servo2, text=text, width=18, command=lambda c=cmd: self.send_command(c)).grid(row=i, column=0, padx=5, pady=5)

        self.frame_sensor = tk.LabelFrame(self.root, text="Monitoring Sensor Garis", padx=10, pady=10, bg="#E8F0FE")
        self.frame_sensor.place(x=500, y=80)

    def calculate_arrow(self):
        angle_rad = math.radians(self.heading_angle)
        size = self.tracker_size
        front = (self.tracker_x + math.cos(angle_rad) * size,
                 self.tracker_y + math.sin(angle_rad) * size)
        left = (self.tracker_x + math.cos(angle_rad + 2.5) * size * 0.7,
                self.tracker_y + math.sin(angle_rad + 2.5) * size * 0.7)
        right = (self.tracker_x + math.cos(angle_rad - 2.5) * size * 0.7,
                 self.tracker_y + math.sin(angle_rad - 2.5) * size * 0.7)
        return [front, left, right]

    def redraw_tracker(self):
        self.tracker_canvas.coords(self.tracker, *sum([list(pt) for pt in self.calculate_arrow()], []))

    def reset_tracker(self):
        self.tracker_x = self.canvas_width // 2
        self.tracker_y = self.canvas_height // 2
        self.heading_angle = 270
        self.tracker_canvas.delete("all")
        self.tracker = self.tracker_canvas.create_polygon(self.calculate_arrow(), fill="blue")
        self.tracker_canvas.create_text(200, 10, text="N", font=("Arial", 10, "bold"))
        self.tracker_canvas.create_text(200, 390, text="S", font=("Arial", 10, "bold"))
        self.tracker_canvas.create_text(10, 200, text="W", font=("Arial", 10, "bold"))
        self.tracker_canvas.create_text(390, 200, text="E", font=("Arial", 10, "bold"))

    def connect_wifi(self):
        ip = self.ip_entry.get()
        try:
            self.tcp_conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.tcp_conn.settimeout(3)
            self.tcp_conn.connect((ip, 80))
            self.tcp_conn.settimeout(None)
            self.connected = True
            messagebox.showinfo("Sukses", f"Terhubung ke ESP di {ip}")
            self.ip_entry.config(state='disabled')  # Optional, biar gak bisa edit lagi
            self.root.focus_set()  # Pindahkan fokus ke root window agar keyboard bisa dipakai
        except Exception as e:
            messagebox.showerror("Gagal", f"Koneksi WiFi gagal:\n{e}")
            self.tcp_conn = None
            self.connected = False


    def send_command(self, cmd):
        if self.connected and self.tcp_conn:
            try:
                self.tcp_conn.send((cmd + "\n").encode())
            except Exception:
                self.connected = False

        self.update_tracker_speed(cmd)
        if cmd.startswith("s1") or cmd.startswith("s2"):
            self.status_grip.set(f"Status Gripper: {cmd}")

    def update_sensor(self):
        while True:
            if self.connected and self.tcp_conn:
                try:
                    data = self.tcp_conn.recv(1024).decode().strip()
                    if data and "," in data:
                        values = data.split(",")
                        if len(values) == 5:
                            for i in range(5):
                                self.sensor_vars[i].set(f"S{i+1}: {values[i]}")
                except:
                    pass
            time.sleep(0.1)

    def update_tracker_speed(self, cmd):
        pwm_map = {
            "w": (+140, +140),
            "wp": (+40, +40),
            "s": (-80, -80),
            "a": (+70, +40),
            "ak": (+90, +20),
            "a90": (+90, -90),
            "d": (+40, +70),
            "dk": (+20, +90),
            "d90": (-90, +90),
            "x": (0, 0)
        }

        status_text = {
            "w": "Maju", "wp": "Maju Pelan", "s": "Mundur",
            "a": "Belok Kiri", "ak": "Belok Kiri Keras", "a90": "Putar Kiri 90",
            "d": "Belok Kanan", "dk": "Belok Kanan Keras", "d90": "Putar Kanan 90",
            "x": "Berhenti"
        }
        self.status_gerak.set(f"Status Gerak: {status_text.get(cmd, '-')}")

        if cmd in ["a90", "d90"]:
            self.stop_timer = 3
        else:
            self.stop_timer = 0

        self.speed_left_pwm, self.speed_right_pwm = pwm_map.get(cmd, (0, 0))

    def update_tracker_loop(self):
        scale = 0.15
        avg_speed = (self.speed_left_pwm + self.speed_right_pwm) / 2
        diff_speed = self.speed_right_pwm - self.speed_left_pwm

        if self.stop_timer > 0:
            turning_amount = (diff_speed / 280) * 10
            self.heading_angle += turning_amount
            self.heading_angle %= 360
            self.stop_timer -= 1
            if self.stop_timer == 0:
                self.speed_left_pwm = 0
                self.speed_right_pwm = 0
        else:
            if abs(diff_speed) > 0:
                turning_amount = (diff_speed / 280) * 10
                self.heading_angle += turning_amount
                self.heading_angle %= 360

            angle_rad = math.radians(self.heading_angle)
            dx = math.cos(angle_rad) * avg_speed * scale
            dy = math.sin(angle_rad) * avg_speed * scale

            prev_x = self.tracker_x
            prev_y = self.tracker_y

            self.tracker_x += dx
            self.tracker_y += dy
            self.tracker_canvas.create_line(prev_x, prev_y, self.tracker_x, self.tracker_y, fill="red", width=2)

        self.redraw_tracker()
        self.root.after(100, self.update_tracker_loop)

if __name__ == "__main__":
    root = tk.Tk()
    app = RobotGUI(root)
    root.mainloop()
