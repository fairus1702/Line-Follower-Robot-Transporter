#include <Ticker.h>

// Motor
const int pwmL = D1;
const int pwmR = D2;
const int rotL = D3;
const int rotR = D4;

// Sensor garis
const int s1 = D6;
const int s2 = D7;
const int s3 = A0;
const int s4 = D8;
const int s5 = 10;

// Servo dengan PWM manual
#define SERVO1_PIN D0
#define SERVO2_PIN D5
Ticker servo1Ticker;
Ticker servo2Ticker;
volatile int angle1 = 0;
volatile int angle2 = 0;

void sendServo1PWM() {
  int pulseWidth = map(angle1, 0, 180, 544, 2400);
  digitalWrite(SERVO1_PIN, HIGH);
  delayMicroseconds(pulseWidth);
  digitalWrite(SERVO1_PIN, LOW);
}

void sendServo2PWM() {
  int pulseWidth = map(angle2, 0, 180, 544, 2400);
  digitalWrite(SERVO2_PIN, HIGH);
  delayMicroseconds(pulseWidth);
  digitalWrite(SERVO2_PIN, LOW);
}

// Function prototypes
void berhenti();
void maju();
void majuPelan();
void belokkiri();
void belokkanan();
void belokkiriKeras();
void belokkananKeras();
void mundur();
void belokkanan90();
void belokkiri90();
void followLine(int S1, int S2, int S3, int S4, int S5);
void executeCase(int caseNumber);
void smoothMove1(int currentAngle, int targetAngle, int stepSize, int delayMs);
void smoothMove2(int currentAngle, int targetAngle, int stepSize, int delayMs);

// Counter Case - mulai dari 7 supaya case pertama adalah case 8
int counterCase = 7;
int currentCase = 8; // Added missing variable

// Flag
bool robotStarted = false;
bool skipFiveSensorPattern = false;

// Tambahan variabel untuk simpang counter
int SimpangCounter = 0;
bool was_intersection = false;

// Kecepatan motor
const int NormalKanan = 110;
const int NormalKiri = 110;
const int KananPelan = 40;
const int KiriPelan = 40;
const int kecepatanBelok = 75;
const int kecepatanBeloklambat = 40;

// Debounce
unsigned long lastCaseTime = 0;
const unsigned long caseDebounceDelay = 2000;

// Threshold analog
const int analogThreshold = 500;

// Global sensor variables
int S1, S2, S3, S4, S5;

void setup() {
  Serial.begin(115200);

  pinMode(pwmL, OUTPUT);
  pinMode(pwmR, OUTPUT);
  pinMode(rotL, OUTPUT);
  pinMode(rotR, OUTPUT);

  pinMode(s1, INPUT);
  pinMode(s2, INPUT);
  pinMode(s4, INPUT);
  pinMode(s5, INPUT);

  pinMode(SERVO1_PIN, OUTPUT);
  pinMode(SERVO2_PIN, OUTPUT);
  servo1Ticker.attach_ms(20, sendServo1PWM);
  servo2Ticker.attach_ms(20, sendServo2PWM);

  angle1 = 120;
  angle2 = 90;

  berhenti();
  Serial.println("Robot siap, menunggu semua sensor HIGH untuk start...");
}

void loop() {
  S1 = digitalRead(s1);
  S2 = digitalRead(s2);
  S3 = analogRead(s3) > analogThreshold ? 1 : 0;
  S4 = digitalRead(s4);
  S5 = digitalRead(s5);

  if (!robotStarted) {
    if (S1 && S2 && S3 && S4 && S5) {
      Serial.println("Semua sensor HIGH - Robot akan start dalam 1 detik...");
      berhenti();
      delay(500);
      robotStarted = true;
      lastCaseTime = millis();
      Serial.println("Robot mulai mengikuti garis!");
    } else {
      berhenti();
      return;
    }
  }

  unsigned long currentTime = millis();
  
  // Untuk case 1-7, gunakan 5 sensor seperti biasa
  if (robotStarted && !skipFiveSensorPattern && counterCase < 7 && S1 && S2 && S3 && S4 && S5) {
    if (currentTime - lastCaseTime > caseDebounceDelay) {
      counterCase++;
      lastCaseTime = currentTime;
      Serial.print("Masuk Case ke-");
      Serial.println(counterCase);
      executeCase(counterCase);
    }
  }
  // Khusus untuk case 8, gunakan 4 sensor
  else if (robotStarted && !skipFiveSensorPattern && counterCase == 7 && S1 && S2 && S3 && S4 && S5) {
    if (currentTime - lastCaseTime > caseDebounceDelay) {
      counterCase++;
      lastCaseTime = currentTime;
      Serial.print("Masuk Case ke-");
      Serial.println(counterCase);
      executeCase(counterCase);
  }
}
  // Untuk case 9, gunakan 4 sensor
  else if (robotStarted && !skipFiveSensorPattern && counterCase == 8 && S1 && S2 && S3 && S4 && S5) {
    if (currentTime - lastCaseTime > caseDebounceDelay) {
      counterCase++;
      lastCaseTime = currentTime;
      Serial.print("Masuk Case ke-");
      Serial.println(counterCase);
      executeCase(counterCase);
    }
  }
  // Untuk case 10 dan 11, gunakan 5 sensor
  else if (robotStarted && !skipFiveSensorPattern && (counterCase == 9 || counterCase == 10) && S1 && S2 && S3 && S4 && S5) {
    if (currentTime - lastCaseTime > caseDebounceDelay) {
      counterCase++;
      lastCaseTime = currentTime;
      Serial.print("Masuk Case ke-");
      Serial.println(counterCase);
      executeCase(counterCase);
    }
  }
  // Untuk case 12, gunakan sensor 2345
  else if (robotStarted && !skipFiveSensorPattern && counterCase == 11 && !S1 && S2 && S3 && S4 && S5) {
    if (currentTime - lastCaseTime > caseDebounceDelay) {
      counterCase++;
      lastCaseTime = currentTime;
      Serial.print("Masuk Case ke-");
      Serial.println(counterCase);
      executeCase(counterCase);
    }
  }
  // Untuk case 13 keatas, gunakan 5 sensor seperti biasa
  else if (robotStarted && !skipFiveSensorPattern && counterCase > 11 && S1 && S2 && S3 && S4 && S5) {
    if (currentTime - lastCaseTime > caseDebounceDelay) {
      counterCase++;
      lastCaseTime = currentTime;
      Serial.print("Masuk Case ke-");
      Serial.println(counterCase);
      executeCase(counterCase);
    }
  } else if (robotStarted && skipFiveSensorPattern) {
    bool pola1 = S1 && S2 && S3 && S4 && !S5;
    bool pola2 = !S1 && S2 && S3 && S4 && S5;

    if ((pola1 || pola2) && currentTime - lastCaseTime > caseDebounceDelay) {
      counterCase++;
      lastCaseTime = currentTime;
      Serial.print("Masuk Case ke-");
      Serial.println(counterCase);
      executeCase(counterCase);
    }
  } else if (robotStarted) {
    followLine(S1, S2, S3, S4, S5);
  }

  static unsigned long lastDebugTime = 0;
  if (robotStarted && millis() - lastDebugTime > 100) {
    Serial.print("S1: "); Serial.print(S1);
    Serial.print(" | S2: "); Serial.print(S2);
    Serial.print(" | S3: "); Serial.print(S3);
    Serial.print(" | S4: "); Serial.print(S4);
    Serial.print(" | S5: "); Serial.println(S5);
    lastDebugTime = millis();
  }
}

void followLine(int S1, int S2, int S3, int S4, int S5) {
  if (S3 || (S2 && S3 && S4)) { maju(); return; }
  if ((S3 && S4) || (S3 && S4 && S5) || (S4 && S5) || (S2 && S3 && S4 && S5)) {
    if (S5) belokkananKeras(); else belokkanan(); return;
  }
  if ((S2 && S3) || (S1 && S2 && S3) || (S1 && S2) || (S1 && S2 && S3 && S4)) {
    if (S1) belokkiriKeras(); else belokkiri(); return;
  }
  mundur();
}

// Implementasi smoothMove functions
void smoothMove1(int currentAngle, int targetAngle, int stepSize, int delayMs) {
  if (currentAngle < targetAngle) {
    for (int i = currentAngle; i <= targetAngle; i += stepSize) {
      angle1 = i;
      delay(delayMs);
    }
  } else {
    for (int i = currentAngle; i >= targetAngle; i -= stepSize) {
      angle1 = i;
      delay(delayMs);
    }
  }
  angle1 = targetAngle; // Pastikan angle tepat di target
}

void smoothMove2(int currentAngle, int targetAngle, int stepSize, int delayMs) {
  if (currentAngle < targetAngle) {
    for (int i = currentAngle; i <= targetAngle; i += stepSize) {
      angle2 = i;
      delay(delayMs);
    }
  } else {
    for (int i = currentAngle; i >= targetAngle; i -= stepSize) {
      angle2 = i;
      delay(delayMs);
    }
  }
  angle2 = targetAngle; // Pastikan angle tepat di target
}

void executeCase(int caseNumber) {
  switch (caseNumber) {
    case 8:
      Serial.println("Case 8: Ambil Kelereng 1");
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(700);
      berhenti(); 
      delay(1000);
      smoothMove1(angle1, 25, 2, 15);
      delay(500);
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(150);
      berhenti(); 
      delay(1000);
      smoothMove2(angle2, 2, 2, 20);
      delay(500);
      berhenti(); 
      delay(1000);
      smoothMove1(angle1, 180, 3, 10);
      delay(500);
      berhenti(); 
      delay(1000);
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 50); 
      analogWrite(pwmR, 50); 
      delay(60);
      belokkiri90(); 
      delay(570);
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 90); 
      analogWrite(pwmR, 90); 
      delay(300);

      // Tambahan: Melewati 3 simpang sebelum ke area taruh kelereng
      SimpangCounter = 0;
      was_intersection = false;

      while (SimpangCounter < 3) {
        // Baca sensor
        S1 = digitalRead(s1);
        S2 = digitalRead(s2);
        S3 = analogRead(s3) > analogThreshold ? 1 : 0;
        S4 = digitalRead(s4);
        S5 = digitalRead(s5);

        // === Deteksi belok kanan tipis ===
        if ((S1 && S2 && S3 && S4 && !S5) || 
            (S1 && S2 && S3 && !S4 && !S5)) {
          digitalWrite(rotL, 1); 
          digitalWrite(rotR, 1);
          analogWrite(pwmL, 60);   // Motor kiri agak lambat
          analogWrite(pwmR, 55);   // Motor kanan lebih lambat
          delay(100);
        }

        // === Deteksi belok kiri tipis ===
        else if ((!S1 && S2 && S3 && S4 && S5) || 
                (!S1 && !S2 && S3 && S4 && S5)) {
          digitalWrite(rotL, 1); 
          digitalWrite(rotR, 1);
          analogWrite(pwmL, 55);   // Motor kiri lebih lambat
          analogWrite(pwmR, 60);   // Motor kanan agak lambat
          delay(100);
        }

        // === Jika tidak belok tipis, followLine biasa ===
        else {
          followLine(S1, S2, S3, S4, S5);
        }

        // === Deteksi simpang ===
        if ((S1 && S2 && S3 && S4) ||        // semua 1234
            (S1 && S2 && S3 && !S4) ||       // pola 123
            (!S1 && S2 && S3 && S4)) {       // pola 234

          if (!was_intersection) {
            SimpangCounter++;
            was_intersection = true;

            Serial.print("Melewati simpang ke-");
            Serial.println(SimpangCounter);

            // Maju sedikit untuk keluar dari simpang
            digitalWrite(rotL, 1); 
            digitalWrite(rotR, 1);
            analogWrite(pwmL, 90); 
            analogWrite(pwmR, 90); 
            delay(300);  // Sesuaikan dengan kebutuhan
          }
        } else {
          was_intersection = false;
        }

        delay(10); // Delay kecil untuk stabilitas
      }

      // Setelah melewati 3 simpang, pastikan posisi stabil
      followLine(S1, S2, S3, S4, S5);

      currentCase = 9;  // Lanjut ke case berikutnya
      break;

    case 9:
      Serial.println("Case 9: Deteksi 4 sensor");
      berhenti(); 
      delay(1000);
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 80); 
      analogWrite(pwmR, 70); 
      delay(500);
      berhenti(); 
      delay(1000);
      // Menggunakan smoothMove untuk servo 1 - gerakan halus dari posisi saat ini ke 110
      smoothMove1(angle1, 120, 2, 15);
      delay(500);
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 70); 
      analogWrite(pwmR, 60); 
      delay(250);
      berhenti(); 
      delay(1000);
      // Menggunakan smoothMove untuk servo 2 - gerakan halus dari posisi saat ini ke 80
      smoothMove2(angle2, 80, 2, 20);
      delay(500);       
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 80); 
      analogWrite(pwmR, 80); 
      delay(800);
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 90); 
      analogWrite(pwmR, 90); 
      delay(570);       
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(150); 

      currentCase = 10;  // Lanjut ke case berikutnya
      break;

    case 10:
      Serial.println("Case 10: Deteksi 5 sensor HIGH");
      berhenti(); 
      delay(1000);
      // Maju sedikit untuk keluar dari area deteksi
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(1000);
      berhenti(); 
      delay(500);
      smoothMove1(angle1, 25, 2, 15);
      delay(500);
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(430);
      berhenti(); 
      delay(500);
      smoothMove2(angle2, 2, 2, 20);
      delay(500);
      berhenti(); 
      delay(1000);
      smoothMove1(angle1, 180, 3, 10);
      delay(500);
      berhenti(); 
      delay(1000);
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(1000);
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 90); 
      analogWrite(pwmR, 90); 
      delay(570); 
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 90); 
      analogWrite(pwmR, 90); 
      delay(300);
        
      currentCase = 11;  // Lanjut ke case berikutnya
      break;

    case 11:
      Serial.println("Case 11: Deteksi 5 sensor HIGH - Operasi kedua");
      berhenti(); 
      delay(1000);
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 80); 
      analogWrite(pwmR, 70); 
      delay(500);
      berhenti(); 
      delay(1000);
      // Menggunakan smoothMove untuk servo 1 - gerakan halus dari posisi saat ini ke 110
      smoothMove1(angle1, 120, 2, 15);
      delay(500);
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 70); 
      analogWrite(pwmR, 60); 
      delay(250);
      berhenti(); 
      delay(1000);
      // Menggunakan smoothMove untuk servo 2 - gerakan halus dari posisi saat ini ke 80
      smoothMove2(angle2, 80, 2, 20);
      delay(500);       
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 80); 
      analogWrite(pwmR, 80); 
      delay(1000);
      digitalWrite(rotL, 0); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 90); 
      analogWrite(pwmR, 90); 
      delay(870);       
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(150); 

      
      currentCase = 12;  // Lanjut ke case berikutnya
      break;

    case 12:
      Serial.println("Case 12: Deteksi sensor 2345");
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 0);
      analogWrite(pwmL, 90); 
      analogWrite(pwmR, 90); 
      digitalWrite(rotL, 1); 
      digitalWrite(rotR, 1);
      analogWrite(pwmL, 60); 
      analogWrite(pwmR, 60); 
      delay(150);
      currentCase = 13;  // Lanjut ke case berikutnya
      break;

      case 13:
        Serial.println("Case 10: Deteksi 5 sensor HIGH");
        berhenti(); 
        delay(1000);
        // Maju sedikit untuk keluar dari area deteksi
        digitalWrite(rotL, 0); 
        digitalWrite(rotR, 0);
        analogWrite(pwmL, 60); 
        analogWrite(pwmR, 60); 
        delay(1000);
        berhenti(); 
        delay(500);
        smoothMove1(angle1, 25, 2, 15);
        delay(500);
        digitalWrite(rotL, 1); 
        digitalWrite(rotR, 1);
        analogWrite(pwmL, 60); 
        analogWrite(pwmR, 60); 
        delay(430);
        berhenti(); 
        delay(500);
        smoothMove2(angle2, 2, 2, 20);
        delay(500);
        berhenti(); 
        delay(1000);
        smoothMove1(angle1, 180, 3, 10);
        delay(500);
        berhenti(); 
        delay(1000);
        digitalWrite(rotL, 0); 
        digitalWrite(rotR, 0);
        analogWrite(pwmL, 60); 
        analogWrite(pwmR, 60); 
        delay(1000);
        digitalWrite(rotL, 1); 
        digitalWrite(rotR, 0);
        analogWrite(pwmL, 90); 
        analogWrite(pwmR, 90); 
        delay(570); 
        digitalWrite(rotL, 1); 
        digitalWrite(rotR, 1);
        analogWrite(pwmL, 90); 
        analogWrite(pwmR, 90); 
        delay(150);

      currentCase = 14;  // Lanjut ke case berikutnya
      break;

      case 14:
        Serial.println("Case 9: Deteksi 4 sensor");
        berhenti(); 
        delay(1000);
        digitalWrite(rotL, 0); 
        digitalWrite(rotR, 0);
        analogWrite(pwmL, 80); 
        analogWrite(pwmR, 70); 
        delay(500);
        berhenti(); 
        delay(1000);
        // Menggunakan smoothMove untuk servo 1 - gerakan halus dari posisi saat ini ke 110
        smoothMove1(angle1, 120, 2, 15);
        delay(500);
        digitalWrite(rotL, 1); 
        digitalWrite(rotR, 1);
        analogWrite(pwmL, 70); 
        analogWrite(pwmR, 60); 
        delay(250);
        berhenti(); 
        delay(1000);
        // Menggunakan smoothMove untuk servo 2 - gerakan halus dari posisi saat ini ke 80
        smoothMove2(angle2, 80, 2, 20);
        delay(500);       
        digitalWrite(rotL, 0); 
        digitalWrite(rotR, 0);
        analogWrite(pwmL, 80); 
        analogWrite(pwmR, 80); 
        delay(800);
        digitalWrite(rotL, 0); 
        digitalWrite(rotR, 1);
        analogWrite(pwmL, 90); 
        analogWrite(pwmR, 90); 
        delay(570);       
        digitalWrite(rotL, 1); 
        digitalWrite(rotR, 1);
        analogWrite(pwmL, 60); 
        analogWrite(pwmR, 60); 
        delay(150);

      currentCase = 15;  // Lanjut ke case berikutnya
      break;

    default:
      Serial.println("Case tidak dikenali");
      break;

  }
  
  Serial.println("Kembali mengikuti garis");
  delay(30); 
}

// Motor functions
void maju() { 
  digitalWrite(rotL, HIGH); 
  digitalWrite(rotR, HIGH); 
  analogWrite(pwmL, NormalKiri); 
  analogWrite(pwmR, NormalKanan); 
}

void majuPelan() { 
  digitalWrite(rotL, HIGH); 
  digitalWrite(rotR, HIGH); 
  analogWrite(pwmL, KiriPelan); 
  analogWrite(pwmR, KananPelan); 
}

void belokkiri() { 
  digitalWrite(rotL, HIGH); 
  digitalWrite(rotR, HIGH); 
  analogWrite(pwmL, kecepatanBelok); 
  analogWrite(pwmR, kecepatanBeloklambat); 
}

void belokkanan() { 
  digitalWrite(rotL, HIGH); 
  digitalWrite(rotR, HIGH); 
  analogWrite(pwmL, kecepatanBeloklambat); 
  analogWrite(pwmR, kecepatanBelok); 
}

void belokkiriKeras() { 
  digitalWrite(rotL, LOW); 
  digitalWrite(rotR, HIGH); 
  analogWrite(pwmL, kecepatanBelok); 
  analogWrite(pwmR, kecepatanBelok); 
}

void belokkananKeras() { 
  digitalWrite(rotL, HIGH); 
  digitalWrite(rotR, LOW); 
  analogWrite(pwmL, kecepatanBelok); 
  analogWrite(pwmR, kecepatanBelok); 
}

void mundur() { 
  digitalWrite(rotL, LOW); 
  digitalWrite(rotR, LOW); 
  analogWrite(pwmL, NormalKiri); 
  analogWrite(pwmR, NormalKanan); 
}

void berhenti() { 
  digitalWrite(rotL, LOW); 
  digitalWrite(rotR, LOW); 
  analogWrite(pwmL, 0); 
  analogWrite(pwmR, 0); 
}

void belokkanan90() { 
  digitalWrite(rotL, HIGH); 
  digitalWrite(rotR, LOW); 
  analogWrite(pwmL, 90); 
  analogWrite(pwmR, 90); 
}

void belokkiri90() { 
  digitalWrite(rotL, LOW); 
  digitalWrite(rotR, HIGH); 
  analogWrite(pwmL, 90); 
  analogWrite(pwmR, 90); 
}
